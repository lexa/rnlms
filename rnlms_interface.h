#ifndef RNLMS_FLOAT_H_
#define RNLMS_FLOAT_H_

#include <stdint.h> 

/* Возможные коды ошибок
 */
typedef enum RNLMS_Result{
    E_NO_ERROR = 0,
      E_ERROR,
      E_BAD_MAIN_DATA,
      E_BAD_BUFF_DATA
} rnlms_result;

/* Опции алгоритма, позволяют менять параметры алгоритма во время его работы
   Изменение этих параметров требуется для прохождения тестов g165
*/
typedef enum RNLMS_Options{
  OPT_INHIBIT_ADAPTATION = 1,
  OPT_DISABLE_NONLINEAR_PROCESSING = 1<<1
} rnlms_options;

/* Параметры работы алгоритма, различные коэффициенты, рекомендуемое значение каждого см ниже
 */
typedef struct _RNLMS_params {
  NUM ALPHA;
  NUM BETTA;
  size_t ERR_BUF_LEN;
  size_t len; 
} RNLMS_params;

/* Хандлер для одного экземпляра адаптивного фильтра, по совместительству - указатель на память фильтра
 */
typedef struct rnlms_data* rnlms_data_hnd;

/*показывает сколько памяти портебуется для хранения фильтра длинны filter_len*/
size_t sizeof_rnlms(size_t P, size_t filter_len);

/*Инициализирует адаптивный фильтр, в заранее выделенном блоке памяти и устанавливает его настройки*/
rnlms_result rnlms_init(rnlms_data_hnd mem, float ALPHA, float BETTA, size_t ERR_BUF_LEN, size_t filter_len);
rnlms_result rnlms_init_by_struct(rnlms_data_hnd mem, RNLMS_params p);


// обрабатывает сигналы дальнего и ближнего абонента и помещает остатночое эхо в err_out
rnlms_result rnlms_process(rnlms_data_hnd rnlms_data_hnd,
			   const int16_t *x_arr,        // far abonent signal
			   const int16_t *y_arr,        // near abonent signal
			   int16_t *err_out,    // result with reduced echo
			   size_t size);

/* 
очисщает память алгоритма при сохранении его настроек - может 
пригодится, когда надо начать обработку данных заново - например, при 
новом звонке в телефонии. */
rnlms_result rnlms_clean_buff(rnlms_data_hnd rnlms_data_hnd);

/*Возвращает опции с которыми работает этот экземпляр алгоритма*/
rnlms_options rnlms_get_options(const rnlms_data_hnd mem);

/*Устанавливает опции для алгоритма*/
rnlms_result rnlms_set_options(rnlms_data_hnd mem, rnlms_options);

/* appendix A Тесты алгоритма:

C данной реализацие алгоритма были проведены тесты на g165. Испытания дали следующие результаты:

Тест #1

В таблице приведён остаточный уровень в зависимости от порядка фильтра, alpha и уровня сигнала ближней стороны

|                                                  |       |   уровень сигнала ближнего абонента   |
|                                  порядок фильтра | alpha |   -10 |   -15 |   -20 |   -25 |   -30 |
|--------------------------------------------------+-------+-------+-------+-------+-------+-------|
|                                              128 | 0.095 | -64.8 | -69.6 | -76.0 | -80.0 | -82.0 |
|                                              512 |  0.45 | -66.9 | -72.5 | -77.2 | -80.7 | -82.4 |
|--------------------------------------------------+-------+-------+-------+-------+-------+-------|
| максимально допустимый уровень остаточно сигнала |       |   -36 |   -39 |   -42 |   -45 |   -48 |
|--------------------------------------------------+-------+-------+-------+-------+-------+-------|


Тест #2

В таблице приведён уровень подавления в зависимости от порядка фильтра,alpha и уровня сигнала ближней стороны

| порядок фильтра | alpha |Уровень сигнала ближней стороны|
|                 |       |   -15 |   -20 |   -25 |   -30 |
|-----------------+-------+-------+-------+-------+-------|
|             128 | 0.095 |  34.9 |  37.5 |  37.1 |  37.3 |
|             512 |  0.45 |  34.3 |  33.6 |  34.5 |  35.2 |

Минимально допустимый уровень подавления 27дБ

Тест #4

В таблице приведён остаточный уровень в зависимости от порядка фильтра,alpha и уровня сигнала ближней стороны

|                                                  |       |   уровень сигнала ближнего абонента   |
|                                  порядок фильтра | alpha |   -10 |   -15 |   -20 |   -25 |   -30 |
|--------------------------------------------------+-------+-------+-------+-------+-------+-------|
|                                              128 | 0.095 | -48.4 | -55.0 | -57.0 | -62.1 | -67.1 |
|                                              512 |  0.45 | -26.6 | -31.2 | -37.4 | -42.4 | -46.5 |
|                                             1024 |   0.9 | -22.6 | -27.9 | -32.9 | -37.9 | -42.9 |
|                                             1024 |  0.39 | -26.1 | -30.7 | -36.2 | -41.1 | -46.6 |
|--------------------------------------------------+-------+-------+-------+-------+-------+-------|
| максимально допустимый уровень остаточно сигнала |       |   -26 |   -29 |   -32 |   -35 |   -38 |
|--------------------------------------------------+-------+-------+-------+-------+-------+-------|



Тест #5

|                 |       |    уровень сигнала ближней стороны    |
| порядок фильтра | alpha |   -10 |   -15 |   -20 |   -25 |   -30 |
|-----------------+-------+-------+-------+-------+-------+-------|
|             128 | 0.095 | -46.6 | -51.7 | -57.7 | -62.9 | -65.2 |
|             512 |  0.45 | -43.7 | -51.7 | -55.7 | -60.8 | -65.8 |

Максимально допустимое значение остатоночго эха -37

Во всех тестах использовались следуюшие параметры алгоритма :
BETTA=10^-7
ERR_BUF_LEN=300
Порядок фильтра == задержке в эхотракте

 */
#endif 
